From bfc25f8fb478ae8c539b72a6e8a3548c70e5e3db Mon Sep 17 00:00:00 2001
From: Julian Lau <wlootlxt123@gmail.com>
Date: Wed, 16 Apr 2025 13:16:01 +0800
Subject: [PATCH] Aggressively optimize for throughput in high loss/latency

---
 net/ipv4/tcp_bbr.c | 16 ++++++++--------
 1 file changed, 8 insertions(+), 8 deletions(-)

diff --git a/net/ipv4/tcp_bbr.c b/net/ipv4/tcp_bbr.c
index e09389c37..e36c8aea4 100644
--- a/net/ipv4/tcp_bbr.c
+++ b/net/ipv4/tcp_bbr.c
@@ -212,7 +212,7 @@ static const int bbr_pacing_margin_percent = 1;
  * and send the same number of packets per RTT that an un-paced, slow-starting
  * Reno or CUBIC flow would:
  */
-static const int bbr_startup_pacing_gain = BBR_UNIT * 277 / 100 + 1;
+static const int bbr_startup_pacing_gain = BBR_UNIT * 300 / 100;
 /* The gain for deriving startup cwnd: */
 static const int bbr_startup_cwnd_gain = BBR_UNIT * 2;
 /* The pacing gain in BBR_DRAIN is calculated to typically drain
@@ -269,7 +269,7 @@ static const u32 bbr_ecn_max_rtt_us = 5000;
 /* On losses, scale down inflight and pacing rate by beta scaled by BBR_SCALE.
  * No loss response when 0.
  */
-static const u32 bbr_beta = BBR_UNIT * 30 / 100;
+static const u32 bbr_beta = BBR_UNIT * 15 / 100;
 
 /* Gain factor for ECN mark ratio samples, scaled by BBR_SCALE (1/16 = 6.25%) */
 static const u32 bbr_ecn_alpha_gain = BBR_UNIT * 1 / 16;
@@ -296,16 +296,16 @@ static const u32 bbr_ecn_thresh = BBR_UNIT * 1 / 2;  /* 1/2 = 50% */
 static const u32 bbr_ecn_reprobe_gain = BBR_UNIT * 1 / 2;
 
 /* Estimate bw probing has gone too far if loss rate exceeds this level. */
-static const u32 bbr_loss_thresh = BBR_UNIT * 2 / 100;  /* 2% loss */
+static const u32 bbr_loss_thresh = BBR_UNIT * 5 / 100;
 
 /* Slow down for a packet loss recovered by TLP? */
-static const bool bbr_loss_probe_recovery = true;
+static const bool bbr_loss_probe_recovery = false;
 
 /* Exit STARTUP if number of loss marking events in a Recovery round is >= N,
  * and loss rate is higher than bbr_loss_thresh.
  * Disabled if 0.
  */
-static const u32 bbr_full_loss_cnt = 6;
+static const u32 bbr_full_loss_cnt = 10;
 
 /* Exit STARTUP if number of round trips with ECN mark rate above ecn_thresh
  * meets this count.
@@ -313,7 +313,7 @@ static const u32 bbr_full_loss_cnt = 6;
 static const u32 bbr_full_ecn_cnt = 2;
 
 /* Fraction of unutilized headroom to try to leave in path upon high loss. */
-static const u32 bbr_inflight_headroom = BBR_UNIT * 15 / 100;
+static const u32 bbr_inflight_headroom = BBR_UNIT * 10 / 100;
 
 /* How much do we increase cwnd_gain when probing for bandwidth in
  * BBR_BW_PROBE_UP? This specifies the increment in units of
@@ -339,10 +339,10 @@ static const u32 bbr_bw_probe_rand_rounds = 2;
  * We aim to be fair with Reno/CUBIC up to an inter-loss time epoch of at least:
  *  BDP*RTT = 25Mbps * .030sec /(1514bytes) * 0.030sec = 1.9 secs
  */
-static const u32 bbr_bw_probe_base_us = 2 * USEC_PER_SEC;  /* 2 secs */
+static const u32 bbr_bw_probe_base_us = 1500 * USEC_PER_MSEC;
 
 /* Use BBR-native probes spread over this many usec: */
-static const u32 bbr_bw_probe_rand_us = 1 * USEC_PER_SEC;  /* 1 secs */
+static const u32 bbr_bw_probe_rand_us = 500 * USEC_PER_MSEC;
 
 /* Use fast path if app-limited, no loss/ECN, and target cwnd was reached? */
 static const bool bbr_fast_path = true;
-- 
2.39.5 (Apple Git-154)

